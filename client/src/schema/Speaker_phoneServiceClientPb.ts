/**
 * @fileoverview gRPC-Web generated client stub for speaker_phone
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.0
// source: speaker_phone.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as speaker_phone_pb from './speaker_phone_pb'; // proto import: "speaker_phone.proto"


export class SpeakerPhoneServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetSpeakerPhone = new grpcWeb.MethodDescriptor(
    '/speaker_phone.SpeakerPhoneService/GetSpeakerPhone',
    grpcWeb.MethodType.UNARY,
    speaker_phone_pb.GetSpeakerPhoneRequest,
    speaker_phone_pb.GetSpeakerPhoneResponse,
    (request: speaker_phone_pb.GetSpeakerPhoneRequest) => {
      return request.serializeBinary();
    },
    speaker_phone_pb.GetSpeakerPhoneResponse.deserializeBinary
  );

  getSpeakerPhone(
    request: speaker_phone_pb.GetSpeakerPhoneRequest,
    metadata?: grpcWeb.Metadata | null): Promise<speaker_phone_pb.GetSpeakerPhoneResponse>;

  getSpeakerPhone(
    request: speaker_phone_pb.GetSpeakerPhoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.GetSpeakerPhoneResponse) => void): grpcWeb.ClientReadableStream<speaker_phone_pb.GetSpeakerPhoneResponse>;

  getSpeakerPhone(
    request: speaker_phone_pb.GetSpeakerPhoneRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.GetSpeakerPhoneResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/speaker_phone.SpeakerPhoneService/GetSpeakerPhone',
        request,
        metadata || {},
        this.methodDescriptorGetSpeakerPhone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/speaker_phone.SpeakerPhoneService/GetSpeakerPhone',
    request,
    metadata || {},
    this.methodDescriptorGetSpeakerPhone);
  }

  methodDescriptorCreateSpeakerPhone = new grpcWeb.MethodDescriptor(
    '/speaker_phone.SpeakerPhoneService/CreateSpeakerPhone',
    grpcWeb.MethodType.UNARY,
    speaker_phone_pb.CreateSpeakerPhoneRequest,
    speaker_phone_pb.CreateSpeakerPhoneResponse,
    (request: speaker_phone_pb.CreateSpeakerPhoneRequest) => {
      return request.serializeBinary();
    },
    speaker_phone_pb.CreateSpeakerPhoneResponse.deserializeBinary
  );

  createSpeakerPhone(
    request: speaker_phone_pb.CreateSpeakerPhoneRequest,
    metadata?: grpcWeb.Metadata | null): Promise<speaker_phone_pb.CreateSpeakerPhoneResponse>;

  createSpeakerPhone(
    request: speaker_phone_pb.CreateSpeakerPhoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.CreateSpeakerPhoneResponse) => void): grpcWeb.ClientReadableStream<speaker_phone_pb.CreateSpeakerPhoneResponse>;

  createSpeakerPhone(
    request: speaker_phone_pb.CreateSpeakerPhoneRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.CreateSpeakerPhoneResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/speaker_phone.SpeakerPhoneService/CreateSpeakerPhone',
        request,
        metadata || {},
        this.methodDescriptorCreateSpeakerPhone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/speaker_phone.SpeakerPhoneService/CreateSpeakerPhone',
    request,
    metadata || {},
    this.methodDescriptorCreateSpeakerPhone);
  }

  methodDescriptorGetAvailableChannels = new grpcWeb.MethodDescriptor(
    '/speaker_phone.SpeakerPhoneService/GetAvailableChannels',
    grpcWeb.MethodType.UNARY,
    speaker_phone_pb.GetAvailableChannelsRequest,
    speaker_phone_pb.GetAvailableChannelsResponse,
    (request: speaker_phone_pb.GetAvailableChannelsRequest) => {
      return request.serializeBinary();
    },
    speaker_phone_pb.GetAvailableChannelsResponse.deserializeBinary
  );

  getAvailableChannels(
    request: speaker_phone_pb.GetAvailableChannelsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<speaker_phone_pb.GetAvailableChannelsResponse>;

  getAvailableChannels(
    request: speaker_phone_pb.GetAvailableChannelsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.GetAvailableChannelsResponse) => void): grpcWeb.ClientReadableStream<speaker_phone_pb.GetAvailableChannelsResponse>;

  getAvailableChannels(
    request: speaker_phone_pb.GetAvailableChannelsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.GetAvailableChannelsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/speaker_phone.SpeakerPhoneService/GetAvailableChannels',
        request,
        metadata || {},
        this.methodDescriptorGetAvailableChannels,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/speaker_phone.SpeakerPhoneService/GetAvailableChannels',
    request,
    metadata || {},
    this.methodDescriptorGetAvailableChannels);
  }

  methodDescriptorSearchChannels = new grpcWeb.MethodDescriptor(
    '/speaker_phone.SpeakerPhoneService/SearchChannels',
    grpcWeb.MethodType.UNARY,
    speaker_phone_pb.SearchChannelsRequest,
    speaker_phone_pb.SearchChannelsResponse,
    (request: speaker_phone_pb.SearchChannelsRequest) => {
      return request.serializeBinary();
    },
    speaker_phone_pb.SearchChannelsResponse.deserializeBinary
  );

  searchChannels(
    request: speaker_phone_pb.SearchChannelsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<speaker_phone_pb.SearchChannelsResponse>;

  searchChannels(
    request: speaker_phone_pb.SearchChannelsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.SearchChannelsResponse) => void): grpcWeb.ClientReadableStream<speaker_phone_pb.SearchChannelsResponse>;

  searchChannels(
    request: speaker_phone_pb.SearchChannelsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: speaker_phone_pb.SearchChannelsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/speaker_phone.SpeakerPhoneService/SearchChannels',
        request,
        metadata || {},
        this.methodDescriptorSearchChannels,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/speaker_phone.SpeakerPhoneService/SearchChannels',
    request,
    metadata || {},
    this.methodDescriptorSearchChannels);
  }

}

