// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: speaker_phone.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { Coordinate } from "./world";

export const protobufPackage = "speaker_phone";

export interface SpeakerPhone {
  /** UUID */
  id: string;
  /** 座標 */
  position:
    | Coordinate
    | undefined;
  /** メッセージを受信できる範囲(半径) */
  receiveRange: number;
  /**
   * SpeakerPhoneの名前
   * 必ず`#`から始まる
   */
  name: string;
  /** 送信日時 */
  createdAt:
    | Date
    | undefined;
  /** 更新日時 */
  updatedAt: Date | undefined;
}

export interface GetSpeakerPhoneRequest {
  id: string;
}

export interface GetSpeakerPhoneResponse {
  speakerPhone: SpeakerPhone | undefined;
}

export interface CreateSpeakerPhoneRequest {
  /** スピーカーフォンの座標 */
  position:
    | Coordinate
    | undefined;
  /**
   * SpeakerPhoneの名前
   * 必ず`#`から始まる
   */
  name: string;
}

export interface CreateSpeakerPhoneResponse {
  speakerPhone: SpeakerPhone | undefined;
}

export interface GetAvailableChannelsRequest {
}

export interface GetAvailableChannelsResponse {
  channels: string[];
}

export interface SearchChannelsRequest {
  name: string;
}

export interface SearchChannelsResponse {
  hits: string[];
}

function createBaseSpeakerPhone(): SpeakerPhone {
  return { id: "", position: undefined, receiveRange: 0, name: "", createdAt: undefined, updatedAt: undefined };
}

export const SpeakerPhone: MessageFns<SpeakerPhone> = {
  encode(message: SpeakerPhone, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.receiveRange !== 0) {
      writer.uint32(24).uint32(message.receiveRange);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeakerPhone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeakerPhone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.receiveRange = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeakerPhone {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
      receiveRange: isSet(object.receiveRange) ? globalThis.Number(object.receiveRange) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: SpeakerPhone): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    if (message.receiveRange !== 0) {
      obj.receiveRange = Math.round(message.receiveRange);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpeakerPhone>, I>>(base?: I): SpeakerPhone {
    return SpeakerPhone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpeakerPhone>, I>>(object: I): SpeakerPhone {
    const message = createBaseSpeakerPhone();
    message.id = object.id ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    message.receiveRange = object.receiveRange ?? 0;
    message.name = object.name ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseGetSpeakerPhoneRequest(): GetSpeakerPhoneRequest {
  return { id: "" };
}

export const GetSpeakerPhoneRequest: MessageFns<GetSpeakerPhoneRequest> = {
  encode(message: GetSpeakerPhoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpeakerPhoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpeakerPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpeakerPhoneRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetSpeakerPhoneRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpeakerPhoneRequest>, I>>(base?: I): GetSpeakerPhoneRequest {
    return GetSpeakerPhoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpeakerPhoneRequest>, I>>(object: I): GetSpeakerPhoneRequest {
    const message = createBaseGetSpeakerPhoneRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetSpeakerPhoneResponse(): GetSpeakerPhoneResponse {
  return { speakerPhone: undefined };
}

export const GetSpeakerPhoneResponse: MessageFns<GetSpeakerPhoneResponse> = {
  encode(message: GetSpeakerPhoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.speakerPhone !== undefined) {
      SpeakerPhone.encode(message.speakerPhone, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpeakerPhoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpeakerPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.speakerPhone = SpeakerPhone.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpeakerPhoneResponse {
    return { speakerPhone: isSet(object.speakerPhone) ? SpeakerPhone.fromJSON(object.speakerPhone) : undefined };
  },

  toJSON(message: GetSpeakerPhoneResponse): unknown {
    const obj: any = {};
    if (message.speakerPhone !== undefined) {
      obj.speakerPhone = SpeakerPhone.toJSON(message.speakerPhone);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpeakerPhoneResponse>, I>>(base?: I): GetSpeakerPhoneResponse {
    return GetSpeakerPhoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpeakerPhoneResponse>, I>>(object: I): GetSpeakerPhoneResponse {
    const message = createBaseGetSpeakerPhoneResponse();
    message.speakerPhone = (object.speakerPhone !== undefined && object.speakerPhone !== null)
      ? SpeakerPhone.fromPartial(object.speakerPhone)
      : undefined;
    return message;
  },
};

function createBaseCreateSpeakerPhoneRequest(): CreateSpeakerPhoneRequest {
  return { position: undefined, name: "" };
}

export const CreateSpeakerPhoneRequest: MessageFns<CreateSpeakerPhoneRequest> = {
  encode(message: CreateSpeakerPhoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpeakerPhoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpeakerPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpeakerPhoneRequest {
    return {
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CreateSpeakerPhoneRequest): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSpeakerPhoneRequest>, I>>(base?: I): CreateSpeakerPhoneRequest {
    return CreateSpeakerPhoneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSpeakerPhoneRequest>, I>>(object: I): CreateSpeakerPhoneRequest {
    const message = createBaseCreateSpeakerPhoneRequest();
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSpeakerPhoneResponse(): CreateSpeakerPhoneResponse {
  return { speakerPhone: undefined };
}

export const CreateSpeakerPhoneResponse: MessageFns<CreateSpeakerPhoneResponse> = {
  encode(message: CreateSpeakerPhoneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.speakerPhone !== undefined) {
      SpeakerPhone.encode(message.speakerPhone, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpeakerPhoneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpeakerPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.speakerPhone = SpeakerPhone.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpeakerPhoneResponse {
    return { speakerPhone: isSet(object.speakerPhone) ? SpeakerPhone.fromJSON(object.speakerPhone) : undefined };
  },

  toJSON(message: CreateSpeakerPhoneResponse): unknown {
    const obj: any = {};
    if (message.speakerPhone !== undefined) {
      obj.speakerPhone = SpeakerPhone.toJSON(message.speakerPhone);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSpeakerPhoneResponse>, I>>(base?: I): CreateSpeakerPhoneResponse {
    return CreateSpeakerPhoneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSpeakerPhoneResponse>, I>>(object: I): CreateSpeakerPhoneResponse {
    const message = createBaseCreateSpeakerPhoneResponse();
    message.speakerPhone = (object.speakerPhone !== undefined && object.speakerPhone !== null)
      ? SpeakerPhone.fromPartial(object.speakerPhone)
      : undefined;
    return message;
  },
};

function createBaseGetAvailableChannelsRequest(): GetAvailableChannelsRequest {
  return {};
}

export const GetAvailableChannelsRequest: MessageFns<GetAvailableChannelsRequest> = {
  encode(_: GetAvailableChannelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAvailableChannelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAvailableChannelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAvailableChannelsRequest {
    return {};
  },

  toJSON(_: GetAvailableChannelsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAvailableChannelsRequest>, I>>(base?: I): GetAvailableChannelsRequest {
    return GetAvailableChannelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAvailableChannelsRequest>, I>>(_: I): GetAvailableChannelsRequest {
    const message = createBaseGetAvailableChannelsRequest();
    return message;
  },
};

function createBaseGetAvailableChannelsResponse(): GetAvailableChannelsResponse {
  return { channels: [] };
}

export const GetAvailableChannelsResponse: MessageFns<GetAvailableChannelsResponse> = {
  encode(message: GetAvailableChannelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.channels) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAvailableChannelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAvailableChannelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channels.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAvailableChannelsResponse {
    return {
      channels: globalThis.Array.isArray(object?.channels) ? object.channels.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetAvailableChannelsResponse): unknown {
    const obj: any = {};
    if (message.channels?.length) {
      obj.channels = message.channels;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAvailableChannelsResponse>, I>>(base?: I): GetAvailableChannelsResponse {
    return GetAvailableChannelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAvailableChannelsResponse>, I>>(object: I): GetAvailableChannelsResponse {
    const message = createBaseGetAvailableChannelsResponse();
    message.channels = object.channels?.map((e) => e) || [];
    return message;
  },
};

function createBaseSearchChannelsRequest(): SearchChannelsRequest {
  return { name: "" };
}

export const SearchChannelsRequest: MessageFns<SearchChannelsRequest> = {
  encode(message: SearchChannelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChannelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChannelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChannelsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: SearchChannelsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchChannelsRequest>, I>>(base?: I): SearchChannelsRequest {
    return SearchChannelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchChannelsRequest>, I>>(object: I): SearchChannelsRequest {
    const message = createBaseSearchChannelsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSearchChannelsResponse(): SearchChannelsResponse {
  return { hits: [] };
}

export const SearchChannelsResponse: MessageFns<SearchChannelsResponse> = {
  encode(message: SearchChannelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hits) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchChannelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchChannelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hits.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchChannelsResponse {
    return { hits: globalThis.Array.isArray(object?.hits) ? object.hits.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: SearchChannelsResponse): unknown {
    const obj: any = {};
    if (message.hits?.length) {
      obj.hits = message.hits;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchChannelsResponse>, I>>(base?: I): SearchChannelsResponse {
    return SearchChannelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchChannelsResponse>, I>>(object: I): SearchChannelsResponse {
    const message = createBaseSearchChannelsResponse();
    message.hits = object.hits?.map((e) => e) || [];
    return message;
  },
};

export interface SpeakerPhoneService {
  GetSpeakerPhone(request: GetSpeakerPhoneRequest): Promise<GetSpeakerPhoneResponse>;
  CreateSpeakerPhone(request: CreateSpeakerPhoneRequest): Promise<CreateSpeakerPhoneResponse>;
  /**
   * SpeakerPhoneの名前として使用可能な文字列のリストを取得する
   * 例: `#general`, `#random`
   */
  GetAvailableChannels(request: GetAvailableChannelsRequest): Promise<GetAvailableChannelsResponse>;
  /** SpeakerPhoneの名前を検索する */
  SearchChannels(request: SearchChannelsRequest): Promise<SearchChannelsResponse>;
}

export const SpeakerPhoneServiceServiceName = "speaker_phone.SpeakerPhoneService";
export class SpeakerPhoneServiceClientImpl implements SpeakerPhoneService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SpeakerPhoneServiceServiceName;
    this.rpc = rpc;
    this.GetSpeakerPhone = this.GetSpeakerPhone.bind(this);
    this.CreateSpeakerPhone = this.CreateSpeakerPhone.bind(this);
    this.GetAvailableChannels = this.GetAvailableChannels.bind(this);
    this.SearchChannels = this.SearchChannels.bind(this);
  }
  GetSpeakerPhone(request: GetSpeakerPhoneRequest): Promise<GetSpeakerPhoneResponse> {
    const data = GetSpeakerPhoneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSpeakerPhone", data);
    return promise.then((data) => GetSpeakerPhoneResponse.decode(new BinaryReader(data)));
  }

  CreateSpeakerPhone(request: CreateSpeakerPhoneRequest): Promise<CreateSpeakerPhoneResponse> {
    const data = CreateSpeakerPhoneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateSpeakerPhone", data);
    return promise.then((data) => CreateSpeakerPhoneResponse.decode(new BinaryReader(data)));
  }

  GetAvailableChannels(request: GetAvailableChannelsRequest): Promise<GetAvailableChannelsResponse> {
    const data = GetAvailableChannelsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAvailableChannels", data);
    return promise.then((data) => GetAvailableChannelsResponse.decode(new BinaryReader(data)));
  }

  SearchChannels(request: SearchChannelsRequest): Promise<SearchChannelsResponse> {
    const data = SearchChannelsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SearchChannels", data);
    return promise.then((data) => SearchChannelsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
