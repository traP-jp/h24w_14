// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: reaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { Coordinate } from "./world";

export const protobufPackage = "reaction";

export interface Reaction {
  /** UUID */
  id: string;
  /** リアクションをしたユーザーのID */
  userId: string;
  /** リアクションをした座標 */
  position:
    | Coordinate
    | undefined;
  /** リアクションの種類 */
  kind: string;
  /** リアクションをした日時 */
  createdAt:
    | Date
    | undefined;
  /**
   * ユーザーがアクセスできる期限
   * TODO: このフィールドは必要か？
   */
  expiresAt: Date | undefined;
}

export interface GetReactionRequest {
  id: string;
}

export interface GetReactionResponse {
  reaction: Reaction | undefined;
}

/** リアクションの作成 */
export interface CreateReactionRequest {
  /** リアクションをする座標 */
  position:
    | Coordinate
    | undefined;
  /** リアクションの種類 */
  kind: string;
}

export interface CreateReactionResponse {
  reaction: Reaction | undefined;
}

function createBaseReaction(): Reaction {
  return { id: "", userId: "", position: undefined, kind: "", createdAt: undefined, expiresAt: undefined };
}

export const Reaction: MessageFns<Reaction> = {
  encode(message: Reaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(26).fork()).join();
    }
    if (message.kind !== "") {
      writer.uint32(34).string(message.kind);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.kind = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reaction {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
    };
  },

  toJSON(message: Reaction): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reaction>, I>>(base?: I): Reaction {
    return Reaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reaction>, I>>(object: I): Reaction {
    const message = createBaseReaction();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    message.kind = object.kind ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.expiresAt = object.expiresAt ?? undefined;
    return message;
  },
};

function createBaseGetReactionRequest(): GetReactionRequest {
  return { id: "" };
}

export const GetReactionRequest: MessageFns<GetReactionRequest> = {
  encode(message: GetReactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReactionRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetReactionRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReactionRequest>, I>>(base?: I): GetReactionRequest {
    return GetReactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReactionRequest>, I>>(object: I): GetReactionRequest {
    const message = createBaseGetReactionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetReactionResponse(): GetReactionResponse {
  return { reaction: undefined };
}

export const GetReactionResponse: MessageFns<GetReactionResponse> = {
  encode(message: GetReactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reaction !== undefined) {
      Reaction.encode(message.reaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reaction = Reaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReactionResponse {
    return { reaction: isSet(object.reaction) ? Reaction.fromJSON(object.reaction) : undefined };
  },

  toJSON(message: GetReactionResponse): unknown {
    const obj: any = {};
    if (message.reaction !== undefined) {
      obj.reaction = Reaction.toJSON(message.reaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReactionResponse>, I>>(base?: I): GetReactionResponse {
    return GetReactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReactionResponse>, I>>(object: I): GetReactionResponse {
    const message = createBaseGetReactionResponse();
    message.reaction = (object.reaction !== undefined && object.reaction !== null)
      ? Reaction.fromPartial(object.reaction)
      : undefined;
    return message;
  },
};

function createBaseCreateReactionRequest(): CreateReactionRequest {
  return { position: undefined, kind: "" };
}

export const CreateReactionRequest: MessageFns<CreateReactionRequest> = {
  encode(message: CreateReactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReactionRequest {
    return {
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
    };
  },

  toJSON(message: CreateReactionRequest): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReactionRequest>, I>>(base?: I): CreateReactionRequest {
    return CreateReactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReactionRequest>, I>>(object: I): CreateReactionRequest {
    const message = createBaseCreateReactionRequest();
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    message.kind = object.kind ?? "";
    return message;
  },
};

function createBaseCreateReactionResponse(): CreateReactionResponse {
  return { reaction: undefined };
}

export const CreateReactionResponse: MessageFns<CreateReactionResponse> = {
  encode(message: CreateReactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reaction !== undefined) {
      Reaction.encode(message.reaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reaction = Reaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReactionResponse {
    return { reaction: isSet(object.reaction) ? Reaction.fromJSON(object.reaction) : undefined };
  },

  toJSON(message: CreateReactionResponse): unknown {
    const obj: any = {};
    if (message.reaction !== undefined) {
      obj.reaction = Reaction.toJSON(message.reaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReactionResponse>, I>>(base?: I): CreateReactionResponse {
    return CreateReactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReactionResponse>, I>>(object: I): CreateReactionResponse {
    const message = createBaseCreateReactionResponse();
    message.reaction = (object.reaction !== undefined && object.reaction !== null)
      ? Reaction.fromPartial(object.reaction)
      : undefined;
    return message;
  },
};

export interface ReactionService {
  GetReaction(request: GetReactionRequest): Promise<GetReactionResponse>;
  CreateReaction(request: CreateReactionRequest): Promise<CreateReactionResponse>;
}

export const ReactionServiceServiceName = "reaction.ReactionService";
export class ReactionServiceClientImpl implements ReactionService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ReactionServiceServiceName;
    this.rpc = rpc;
    this.GetReaction = this.GetReaction.bind(this);
    this.CreateReaction = this.CreateReaction.bind(this);
  }
  GetReaction(request: GetReactionRequest): Promise<GetReactionResponse> {
    const data = GetReactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReaction", data);
    return promise.then((data) => GetReactionResponse.decode(new BinaryReader(data)));
  }

  CreateReaction(request: CreateReactionRequest): Promise<CreateReactionResponse> {
    const data = CreateReactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateReaction", data);
    return promise.then((data) => CreateReactionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
