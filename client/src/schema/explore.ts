// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: explore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coordinate, Size } from "./world";

export const protobufPackage = "explore";

/** 探索者; 探索中のユーザー */
export interface Explorer {
  /** UUID (ULIDかも) ユーザーIDとは別物 */
  id: string;
  /**
   * ユーザーID
   * ユーザーの情報はuser.protoに記述
   */
  userId: string;
  /** そのユーザーの現在地 座標 */
  position: Coordinate | undefined;
}

/** 探索者が一度に表示できる領域 */
export interface ExplorationField {
  /** 中心座標 */
  position:
  | Coordinate
  | undefined;
  /** 表示範囲 */
  size: Size | undefined;
}

export interface ExplorerAction {
  arrive?: ExplorerAction_Arrive | undefined;
  move?: ExplorerAction_Move | undefined;
  leave?: ExplorerAction_Leave | undefined;
}

/** 探索者がオンラインになった時 */
export interface ExplorerAction_Arrive {
  /** 探索者のID */
  id: string;
  /** 探索者の現在地 */
  position: Coordinate | undefined;
}

/** 探索者が移動した時 */
export interface ExplorerAction_Move {
  /** 探索者のID */
  id: string;
  /** 探索者の現在地 */
  position: Coordinate | undefined;
}

/** 探索者がオフラインになった時 */
export interface ExplorerAction_Leave {
  /** 探索者のID */
  id: string;
}

/** フィールド探索中のイベント */
export interface ExplorationFieldEvents {
  /**
   * 新しいメッセージのIDリスト
   * 直近に投稿されたメッセージ、以前に投稿されたがExplorationFieldに入ったメッセージを含む
   */
  messages: string[];
  /**
   * 新しいスピーカーフォンのIDリスト
   * 直近に設置されたスピーカーフォン、以前に設置されたがExplorationFieldに入ったスピーカーフォンを含む
   */
  speakerPhones: string[];
  /**
   * 新しいリアクションのIDリスト
   * 直近のリアクションのみを含む
   * 以前のリアクションは含まない; すぐに揮発して見えなくなるため
   */
  reactions: string[];
  /**
   * 探索者の更新全般
   * 新しくオンラインになったユーザー、既にオンラインで移動したユーザー、オフラインになったユーザーを含む
   */
  explorerActions: ExplorerAction[];
}

function createBaseExplorer(): Explorer {
  return { id: "", userId: "", position: undefined };
}

export const Explorer: MessageFns<Explorer> = {
  encode(message: Explorer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Explorer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Explorer {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: Explorer): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Explorer>, I>>(base?: I): Explorer {
    return Explorer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Explorer>, I>>(object: I): Explorer {
    const message = createBaseExplorer();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseExplorationField(): ExplorationField {
  return { position: undefined, size: undefined };
}

export const ExplorationField: MessageFns<ExplorationField> = {
  encode(message: ExplorationField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(10).fork()).join();
    }
    if (message.size !== undefined) {
      Size.encode(message.size, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplorationField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorationField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.size = Size.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplorationField {
    return {
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
      size: isSet(object.size) ? Size.fromJSON(object.size) : undefined,
    };
  },

  toJSON(message: ExplorationField): unknown {
    const obj: any = {};
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    if (message.size !== undefined) {
      obj.size = Size.toJSON(message.size);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExplorationField>, I>>(base?: I): ExplorationField {
    return ExplorationField.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExplorationField>, I>>(object: I): ExplorationField {
    const message = createBaseExplorationField();
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    message.size = (object.size !== undefined && object.size !== null) ? Size.fromPartial(object.size) : undefined;
    return message;
  },
};

function createBaseExplorerAction(): ExplorerAction {
  return { arrive: undefined, move: undefined, leave: undefined };
}

export const ExplorerAction: MessageFns<ExplorerAction> = {
  encode(message: ExplorerAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.arrive !== undefined) {
      ExplorerAction_Arrive.encode(message.arrive, writer.uint32(10).fork()).join();
    }
    if (message.move !== undefined) {
      ExplorerAction_Move.encode(message.move, writer.uint32(18).fork()).join();
    }
    if (message.leave !== undefined) {
      ExplorerAction_Leave.encode(message.leave, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplorerAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.arrive = ExplorerAction_Arrive.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.move = ExplorerAction_Move.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.leave = ExplorerAction_Leave.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplorerAction {
    return {
      arrive: isSet(object.arrive) ? ExplorerAction_Arrive.fromJSON(object.arrive) : undefined,
      move: isSet(object.move) ? ExplorerAction_Move.fromJSON(object.move) : undefined,
      leave: isSet(object.leave) ? ExplorerAction_Leave.fromJSON(object.leave) : undefined,
    };
  },

  toJSON(message: ExplorerAction): unknown {
    const obj: any = {};
    if (message.arrive !== undefined) {
      obj.arrive = ExplorerAction_Arrive.toJSON(message.arrive);
    }
    if (message.move !== undefined) {
      obj.move = ExplorerAction_Move.toJSON(message.move);
    }
    if (message.leave !== undefined) {
      obj.leave = ExplorerAction_Leave.toJSON(message.leave);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExplorerAction>, I>>(base?: I): ExplorerAction {
    return ExplorerAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExplorerAction>, I>>(object: I): ExplorerAction {
    const message = createBaseExplorerAction();
    message.arrive = (object.arrive !== undefined && object.arrive !== null)
      ? ExplorerAction_Arrive.fromPartial(object.arrive)
      : undefined;
    message.move = (object.move !== undefined && object.move !== null)
      ? ExplorerAction_Move.fromPartial(object.move)
      : undefined;
    message.leave = (object.leave !== undefined && object.leave !== null)
      ? ExplorerAction_Leave.fromPartial(object.leave)
      : undefined;
    return message;
  },
};

function createBaseExplorerAction_Arrive(): ExplorerAction_Arrive {
  return { id: "", position: undefined };
}

export const ExplorerAction_Arrive: MessageFns<ExplorerAction_Arrive> = {
  encode(message: ExplorerAction_Arrive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplorerAction_Arrive {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorerAction_Arrive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplorerAction_Arrive {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: ExplorerAction_Arrive): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExplorerAction_Arrive>, I>>(base?: I): ExplorerAction_Arrive {
    return ExplorerAction_Arrive.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExplorerAction_Arrive>, I>>(object: I): ExplorerAction_Arrive {
    const message = createBaseExplorerAction_Arrive();
    message.id = object.id ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseExplorerAction_Move(): ExplorerAction_Move {
  return { id: "", position: undefined };
}

export const ExplorerAction_Move: MessageFns<ExplorerAction_Move> = {
  encode(message: ExplorerAction_Move, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.position !== undefined) {
      Coordinate.encode(message.position, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplorerAction_Move {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorerAction_Move();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Coordinate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplorerAction_Move {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      position: isSet(object.position) ? Coordinate.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: ExplorerAction_Move): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Coordinate.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExplorerAction_Move>, I>>(base?: I): ExplorerAction_Move {
    return ExplorerAction_Move.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExplorerAction_Move>, I>>(object: I): ExplorerAction_Move {
    const message = createBaseExplorerAction_Move();
    message.id = object.id ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinate.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseExplorerAction_Leave(): ExplorerAction_Leave {
  return { id: "" };
}

export const ExplorerAction_Leave: MessageFns<ExplorerAction_Leave> = {
  encode(message: ExplorerAction_Leave, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplorerAction_Leave {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorerAction_Leave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplorerAction_Leave {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ExplorerAction_Leave): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExplorerAction_Leave>, I>>(base?: I): ExplorerAction_Leave {
    return ExplorerAction_Leave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExplorerAction_Leave>, I>>(object: I): ExplorerAction_Leave {
    const message = createBaseExplorerAction_Leave();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseExplorationFieldEvents(): ExplorationFieldEvents {
  return { messages: [], speakerPhones: [], reactions: [], explorerActions: [] };
}

export const ExplorationFieldEvents: MessageFns<ExplorationFieldEvents> = {
  encode(message: ExplorationFieldEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.speakerPhones) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.reactions) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.explorerActions) {
      ExplorerAction.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExplorationFieldEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExplorationFieldEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.speakerPhones.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reactions.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.explorerActions.push(ExplorerAction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExplorationFieldEvents {
    return {
      messages: globalThis.Array.isArray(object?.messages) ? object.messages.map((e: any) => globalThis.String(e)) : [],
      speakerPhones: globalThis.Array.isArray(object?.speakerPhones)
        ? object.speakerPhones.map((e: any) => globalThis.String(e))
        : [],
      reactions: globalThis.Array.isArray(object?.reactions)
        ? object.reactions.map((e: any) => globalThis.String(e))
        : [],
      explorerActions: globalThis.Array.isArray(object?.explorerActions)
        ? object.explorerActions.map((e: any) => ExplorerAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExplorationFieldEvents): unknown {
    const obj: any = {};
    if (message.messages?.length) {
      obj.messages = message.messages;
    }
    if (message.speakerPhones?.length) {
      obj.speakerPhones = message.speakerPhones;
    }
    if (message.reactions?.length) {
      obj.reactions = message.reactions;
    }
    if (message.explorerActions?.length) {
      obj.explorerActions = message.explorerActions.map((e) => ExplorerAction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExplorationFieldEvents>, I>>(base?: I): ExplorationFieldEvents {
    return ExplorationFieldEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExplorationFieldEvents>, I>>(object: I): ExplorationFieldEvents {
    const message = createBaseExplorationFieldEvents();
    message.messages = object.messages?.map((e) => e) || [];
    message.speakerPhones = object.speakerPhones?.map((e) => e) || [];
    message.reactions = object.reactions?.map((e) => e) || [];
    message.explorerActions = object.explorerActions?.map((e) => ExplorerAction.fromPartial(e)) || [];
    return message;
  },
};

/**
 * 探索ストリーム
 * ExplorationField: 探索者が移動する度にクライアントから送信する
 * ExplorationFieldEvents: 他の探索者の移動、メッセージの投稿等のイベントを受信する
 *     ExplorationFieldの更新に伴って既存の探索者、既存のメッセージも受信する
 * rpc Explore(stream ExplorationField) returns (stream ExplorationFieldEvents);
 */
export interface ExploreService {
}

export const ExploreServiceServiceName = "explore.ExploreService";
export class ExploreServiceClientImpl implements ExploreService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ExploreServiceServiceName;
    this.rpc = rpc;
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
