// source: explore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var message_pb = require('./message_pb.js');
goog.object.extend(proto, message_pb);
var reaction_pb = require('./reaction_pb.js');
goog.object.extend(proto, reaction_pb);
var speaker_phone_pb = require('./speaker_phone_pb.js');
goog.object.extend(proto, speaker_phone_pb);
var world_pb = require('./world_pb.js');
goog.object.extend(proto, world_pb);
goog.exportSymbol('proto.explore.ExplorationField', null, global);
goog.exportSymbol('proto.explore.ExplorationFieldEvents', null, global);
goog.exportSymbol('proto.explore.Explorer', null, global);
goog.exportSymbol('proto.explore.ExplorerAction', null, global);
goog.exportSymbol('proto.explore.ExplorerAction.ActionCase', null, global);
goog.exportSymbol('proto.explore.ExplorerAction.Arrive', null, global);
goog.exportSymbol('proto.explore.ExplorerAction.Leave', null, global);
goog.exportSymbol('proto.explore.ExplorerAction.Move', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.Explorer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.explore.Explorer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.Explorer.displayName = 'proto.explore.Explorer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.ExplorationField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.explore.ExplorationField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.ExplorationField.displayName = 'proto.explore.ExplorationField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.ExplorerAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.explore.ExplorerAction.oneofGroups_);
};
goog.inherits(proto.explore.ExplorerAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.ExplorerAction.displayName = 'proto.explore.ExplorerAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.ExplorerAction.Arrive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.explore.ExplorerAction.Arrive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.ExplorerAction.Arrive.displayName = 'proto.explore.ExplorerAction.Arrive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.ExplorerAction.Move = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.explore.ExplorerAction.Move, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.ExplorerAction.Move.displayName = 'proto.explore.ExplorerAction.Move';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.ExplorerAction.Leave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.explore.ExplorerAction.Leave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.ExplorerAction.Leave.displayName = 'proto.explore.ExplorerAction.Leave';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.explore.ExplorationFieldEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.explore.ExplorationFieldEvents.repeatedFields_, null);
};
goog.inherits(proto.explore.ExplorationFieldEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.explore.ExplorationFieldEvents.displayName = 'proto.explore.ExplorationFieldEvents';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.Explorer.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.Explorer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.Explorer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.Explorer.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
position: (f = msg.getPosition()) && world_pb.Coordinate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.Explorer}
 */
proto.explore.Explorer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.Explorer;
  return proto.explore.Explorer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.Explorer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.Explorer}
 */
proto.explore.Explorer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = new world_pb.Coordinate;
      reader.readMessage(value,world_pb.Coordinate.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.Explorer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.Explorer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.Explorer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.Explorer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      world_pb.Coordinate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.explore.Explorer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.explore.Explorer} returns this
 */
proto.explore.Explorer.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.explore.Explorer.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.explore.Explorer} returns this
 */
proto.explore.Explorer.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional world.Coordinate position = 3;
 * @return {?proto.world.Coordinate}
 */
proto.explore.Explorer.prototype.getPosition = function() {
  return /** @type{?proto.world.Coordinate} */ (
    jspb.Message.getWrapperField(this, world_pb.Coordinate, 3));
};


/**
 * @param {?proto.world.Coordinate|undefined} value
 * @return {!proto.explore.Explorer} returns this
*/
proto.explore.Explorer.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.Explorer} returns this
 */
proto.explore.Explorer.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.Explorer.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.ExplorationField.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.ExplorationField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.ExplorationField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorationField.toObject = function(includeInstance, msg) {
  var f, obj = {
position: (f = msg.getPosition()) && world_pb.Coordinate.toObject(includeInstance, f),
size: (f = msg.getSize()) && world_pb.Size.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.ExplorationField}
 */
proto.explore.ExplorationField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.ExplorationField;
  return proto.explore.ExplorationField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.ExplorationField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.ExplorationField}
 */
proto.explore.ExplorationField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new world_pb.Coordinate;
      reader.readMessage(value,world_pb.Coordinate.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new world_pb.Size;
      reader.readMessage(value,world_pb.Size.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.ExplorationField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.ExplorationField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.ExplorationField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorationField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      world_pb.Coordinate.serializeBinaryToWriter
    );
  }
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      world_pb.Size.serializeBinaryToWriter
    );
  }
};


/**
 * optional world.Coordinate position = 1;
 * @return {?proto.world.Coordinate}
 */
proto.explore.ExplorationField.prototype.getPosition = function() {
  return /** @type{?proto.world.Coordinate} */ (
    jspb.Message.getWrapperField(this, world_pb.Coordinate, 1));
};


/**
 * @param {?proto.world.Coordinate|undefined} value
 * @return {!proto.explore.ExplorationField} returns this
*/
proto.explore.ExplorationField.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorationField} returns this
 */
proto.explore.ExplorationField.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorationField.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional world.Size size = 2;
 * @return {?proto.world.Size}
 */
proto.explore.ExplorationField.prototype.getSize = function() {
  return /** @type{?proto.world.Size} */ (
    jspb.Message.getWrapperField(this, world_pb.Size, 2));
};


/**
 * @param {?proto.world.Size|undefined} value
 * @return {!proto.explore.ExplorationField} returns this
*/
proto.explore.ExplorationField.prototype.setSize = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorationField} returns this
 */
proto.explore.ExplorationField.prototype.clearSize = function() {
  return this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorationField.prototype.hasSize = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.explore.ExplorerAction.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.explore.ExplorerAction.ActionCase = {
  ACTION_NOT_SET: 0,
  ARRIVE: 1,
  MOVE: 2,
  LEAVE: 3
};

/**
 * @return {proto.explore.ExplorerAction.ActionCase}
 */
proto.explore.ExplorerAction.prototype.getActionCase = function() {
  return /** @type {proto.explore.ExplorerAction.ActionCase} */(jspb.Message.computeOneofCase(this, proto.explore.ExplorerAction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.ExplorerAction.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.ExplorerAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.ExplorerAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.toObject = function(includeInstance, msg) {
  var f, obj = {
arrive: (f = msg.getArrive()) && proto.explore.ExplorerAction.Arrive.toObject(includeInstance, f),
move: (f = msg.getMove()) && proto.explore.ExplorerAction.Move.toObject(includeInstance, f),
leave: (f = msg.getLeave()) && proto.explore.ExplorerAction.Leave.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.ExplorerAction}
 */
proto.explore.ExplorerAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.ExplorerAction;
  return proto.explore.ExplorerAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.ExplorerAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.ExplorerAction}
 */
proto.explore.ExplorerAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.explore.ExplorerAction.Arrive;
      reader.readMessage(value,proto.explore.ExplorerAction.Arrive.deserializeBinaryFromReader);
      msg.setArrive(value);
      break;
    case 2:
      var value = new proto.explore.ExplorerAction.Move;
      reader.readMessage(value,proto.explore.ExplorerAction.Move.deserializeBinaryFromReader);
      msg.setMove(value);
      break;
    case 3:
      var value = new proto.explore.ExplorerAction.Leave;
      reader.readMessage(value,proto.explore.ExplorerAction.Leave.deserializeBinaryFromReader);
      msg.setLeave(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.ExplorerAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.ExplorerAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.ExplorerAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.explore.ExplorerAction.Arrive.serializeBinaryToWriter
    );
  }
  f = message.getMove();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.explore.ExplorerAction.Move.serializeBinaryToWriter
    );
  }
  f = message.getLeave();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.explore.ExplorerAction.Leave.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.ExplorerAction.Arrive.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.ExplorerAction.Arrive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.ExplorerAction.Arrive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.Arrive.toObject = function(includeInstance, msg) {
  var f, obj = {
explorer: (f = msg.getExplorer()) && proto.explore.Explorer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.ExplorerAction.Arrive}
 */
proto.explore.ExplorerAction.Arrive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.ExplorerAction.Arrive;
  return proto.explore.ExplorerAction.Arrive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.ExplorerAction.Arrive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.ExplorerAction.Arrive}
 */
proto.explore.ExplorerAction.Arrive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.explore.Explorer;
      reader.readMessage(value,proto.explore.Explorer.deserializeBinaryFromReader);
      msg.setExplorer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.ExplorerAction.Arrive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.ExplorerAction.Arrive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.ExplorerAction.Arrive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.Arrive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExplorer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.explore.Explorer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Explorer explorer = 1;
 * @return {?proto.explore.Explorer}
 */
proto.explore.ExplorerAction.Arrive.prototype.getExplorer = function() {
  return /** @type{?proto.explore.Explorer} */ (
    jspb.Message.getWrapperField(this, proto.explore.Explorer, 1));
};


/**
 * @param {?proto.explore.Explorer|undefined} value
 * @return {!proto.explore.ExplorerAction.Arrive} returns this
*/
proto.explore.ExplorerAction.Arrive.prototype.setExplorer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorerAction.Arrive} returns this
 */
proto.explore.ExplorerAction.Arrive.prototype.clearExplorer = function() {
  return this.setExplorer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorerAction.Arrive.prototype.hasExplorer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.ExplorerAction.Move.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.ExplorerAction.Move.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.ExplorerAction.Move} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.Move.toObject = function(includeInstance, msg) {
  var f, obj = {
explorer: (f = msg.getExplorer()) && proto.explore.Explorer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.ExplorerAction.Move}
 */
proto.explore.ExplorerAction.Move.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.ExplorerAction.Move;
  return proto.explore.ExplorerAction.Move.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.ExplorerAction.Move} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.ExplorerAction.Move}
 */
proto.explore.ExplorerAction.Move.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.explore.Explorer;
      reader.readMessage(value,proto.explore.Explorer.deserializeBinaryFromReader);
      msg.setExplorer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.ExplorerAction.Move.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.ExplorerAction.Move.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.ExplorerAction.Move} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.Move.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExplorer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.explore.Explorer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Explorer explorer = 1;
 * @return {?proto.explore.Explorer}
 */
proto.explore.ExplorerAction.Move.prototype.getExplorer = function() {
  return /** @type{?proto.explore.Explorer} */ (
    jspb.Message.getWrapperField(this, proto.explore.Explorer, 1));
};


/**
 * @param {?proto.explore.Explorer|undefined} value
 * @return {!proto.explore.ExplorerAction.Move} returns this
*/
proto.explore.ExplorerAction.Move.prototype.setExplorer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorerAction.Move} returns this
 */
proto.explore.ExplorerAction.Move.prototype.clearExplorer = function() {
  return this.setExplorer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorerAction.Move.prototype.hasExplorer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.ExplorerAction.Leave.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.ExplorerAction.Leave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.ExplorerAction.Leave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.Leave.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.ExplorerAction.Leave}
 */
proto.explore.ExplorerAction.Leave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.ExplorerAction.Leave;
  return proto.explore.ExplorerAction.Leave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.ExplorerAction.Leave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.ExplorerAction.Leave}
 */
proto.explore.ExplorerAction.Leave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.ExplorerAction.Leave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.ExplorerAction.Leave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.ExplorerAction.Leave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorerAction.Leave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.explore.ExplorerAction.Leave.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.explore.ExplorerAction.Leave} returns this
 */
proto.explore.ExplorerAction.Leave.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Arrive arrive = 1;
 * @return {?proto.explore.ExplorerAction.Arrive}
 */
proto.explore.ExplorerAction.prototype.getArrive = function() {
  return /** @type{?proto.explore.ExplorerAction.Arrive} */ (
    jspb.Message.getWrapperField(this, proto.explore.ExplorerAction.Arrive, 1));
};


/**
 * @param {?proto.explore.ExplorerAction.Arrive|undefined} value
 * @return {!proto.explore.ExplorerAction} returns this
*/
proto.explore.ExplorerAction.prototype.setArrive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.explore.ExplorerAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorerAction} returns this
 */
proto.explore.ExplorerAction.prototype.clearArrive = function() {
  return this.setArrive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorerAction.prototype.hasArrive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Move move = 2;
 * @return {?proto.explore.ExplorerAction.Move}
 */
proto.explore.ExplorerAction.prototype.getMove = function() {
  return /** @type{?proto.explore.ExplorerAction.Move} */ (
    jspb.Message.getWrapperField(this, proto.explore.ExplorerAction.Move, 2));
};


/**
 * @param {?proto.explore.ExplorerAction.Move|undefined} value
 * @return {!proto.explore.ExplorerAction} returns this
*/
proto.explore.ExplorerAction.prototype.setMove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.explore.ExplorerAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorerAction} returns this
 */
proto.explore.ExplorerAction.prototype.clearMove = function() {
  return this.setMove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorerAction.prototype.hasMove = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Leave leave = 3;
 * @return {?proto.explore.ExplorerAction.Leave}
 */
proto.explore.ExplorerAction.prototype.getLeave = function() {
  return /** @type{?proto.explore.ExplorerAction.Leave} */ (
    jspb.Message.getWrapperField(this, proto.explore.ExplorerAction.Leave, 3));
};


/**
 * @param {?proto.explore.ExplorerAction.Leave|undefined} value
 * @return {!proto.explore.ExplorerAction} returns this
*/
proto.explore.ExplorerAction.prototype.setLeave = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.explore.ExplorerAction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.explore.ExplorerAction} returns this
 */
proto.explore.ExplorerAction.prototype.clearLeave = function() {
  return this.setLeave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.explore.ExplorerAction.prototype.hasLeave = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.explore.ExplorationFieldEvents.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.explore.ExplorationFieldEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.explore.ExplorationFieldEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.explore.ExplorationFieldEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorationFieldEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    message_pb.Message.toObject, includeInstance),
speakerPhonesList: jspb.Message.toObjectList(msg.getSpeakerPhonesList(),
    speaker_phone_pb.SpeakerPhone.toObject, includeInstance),
reactionsList: jspb.Message.toObjectList(msg.getReactionsList(),
    reaction_pb.Reaction.toObject, includeInstance),
explorerActionsList: jspb.Message.toObjectList(msg.getExplorerActionsList(),
    proto.explore.ExplorerAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.explore.ExplorationFieldEvents}
 */
proto.explore.ExplorationFieldEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.explore.ExplorationFieldEvents;
  return proto.explore.ExplorationFieldEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.explore.ExplorationFieldEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.explore.ExplorationFieldEvents}
 */
proto.explore.ExplorationFieldEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new message_pb.Message;
      reader.readMessage(value,message_pb.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = new speaker_phone_pb.SpeakerPhone;
      reader.readMessage(value,speaker_phone_pb.SpeakerPhone.deserializeBinaryFromReader);
      msg.addSpeakerPhones(value);
      break;
    case 3:
      var value = new reaction_pb.Reaction;
      reader.readMessage(value,reaction_pb.Reaction.deserializeBinaryFromReader);
      msg.addReactions(value);
      break;
    case 4:
      var value = new proto.explore.ExplorerAction;
      reader.readMessage(value,proto.explore.ExplorerAction.deserializeBinaryFromReader);
      msg.addExplorerActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.explore.ExplorationFieldEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.explore.ExplorationFieldEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.explore.ExplorationFieldEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.explore.ExplorationFieldEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      message_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getSpeakerPhonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      speaker_phone_pb.SpeakerPhone.serializeBinaryToWriter
    );
  }
  f = message.getReactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      reaction_pb.Reaction.serializeBinaryToWriter
    );
  }
  f = message.getExplorerActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.explore.ExplorerAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated msg.Message messages = 1;
 * @return {!Array<!proto.msg.Message>}
 */
proto.explore.ExplorationFieldEvents.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.msg.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, message_pb.Message, 1));
};


/**
 * @param {!Array<!proto.msg.Message>} value
 * @return {!proto.explore.ExplorationFieldEvents} returns this
*/
proto.explore.ExplorationFieldEvents.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Message}
 */
proto.explore.ExplorationFieldEvents.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.explore.ExplorationFieldEvents} returns this
 */
proto.explore.ExplorationFieldEvents.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * repeated speaker_phone.SpeakerPhone speaker_phones = 2;
 * @return {!Array<!proto.speaker_phone.SpeakerPhone>}
 */
proto.explore.ExplorationFieldEvents.prototype.getSpeakerPhonesList = function() {
  return /** @type{!Array<!proto.speaker_phone.SpeakerPhone>} */ (
    jspb.Message.getRepeatedWrapperField(this, speaker_phone_pb.SpeakerPhone, 2));
};


/**
 * @param {!Array<!proto.speaker_phone.SpeakerPhone>} value
 * @return {!proto.explore.ExplorationFieldEvents} returns this
*/
proto.explore.ExplorationFieldEvents.prototype.setSpeakerPhonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.speaker_phone.SpeakerPhone=} opt_value
 * @param {number=} opt_index
 * @return {!proto.speaker_phone.SpeakerPhone}
 */
proto.explore.ExplorationFieldEvents.prototype.addSpeakerPhones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.speaker_phone.SpeakerPhone, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.explore.ExplorationFieldEvents} returns this
 */
proto.explore.ExplorationFieldEvents.prototype.clearSpeakerPhonesList = function() {
  return this.setSpeakerPhonesList([]);
};


/**
 * repeated reaction.Reaction reactions = 3;
 * @return {!Array<!proto.reaction.Reaction>}
 */
proto.explore.ExplorationFieldEvents.prototype.getReactionsList = function() {
  return /** @type{!Array<!proto.reaction.Reaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, reaction_pb.Reaction, 3));
};


/**
 * @param {!Array<!proto.reaction.Reaction>} value
 * @return {!proto.explore.ExplorationFieldEvents} returns this
*/
proto.explore.ExplorationFieldEvents.prototype.setReactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.reaction.Reaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.reaction.Reaction}
 */
proto.explore.ExplorationFieldEvents.prototype.addReactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.reaction.Reaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.explore.ExplorationFieldEvents} returns this
 */
proto.explore.ExplorationFieldEvents.prototype.clearReactionsList = function() {
  return this.setReactionsList([]);
};


/**
 * repeated ExplorerAction explorer_actions = 4;
 * @return {!Array<!proto.explore.ExplorerAction>}
 */
proto.explore.ExplorationFieldEvents.prototype.getExplorerActionsList = function() {
  return /** @type{!Array<!proto.explore.ExplorerAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.explore.ExplorerAction, 4));
};


/**
 * @param {!Array<!proto.explore.ExplorerAction>} value
 * @return {!proto.explore.ExplorationFieldEvents} returns this
*/
proto.explore.ExplorationFieldEvents.prototype.setExplorerActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.explore.ExplorerAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.explore.ExplorerAction}
 */
proto.explore.ExplorationFieldEvents.prototype.addExplorerActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.explore.ExplorerAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.explore.ExplorationFieldEvents} returns this
 */
proto.explore.ExplorationFieldEvents.prototype.clearExplorerActionsList = function() {
  return this.setExplorerActionsList([]);
};


goog.object.extend(exports, proto.explore);
