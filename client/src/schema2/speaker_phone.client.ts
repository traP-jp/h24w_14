// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "speaker_phone.proto" (package "speaker_phone", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SpeakerPhoneService } from "./speaker_phone";
import type { SearchChannelsResponse } from "./speaker_phone";
import type { SearchChannelsRequest } from "./speaker_phone";
import type { GetAvailableChannelsResponse } from "./speaker_phone";
import type { GetAvailableChannelsRequest } from "./speaker_phone";
import type { CreateSpeakerPhoneResponse } from "./speaker_phone";
import type { CreateSpeakerPhoneRequest } from "./speaker_phone";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetSpeakerPhoneResponse } from "./speaker_phone";
import type { GetSpeakerPhoneRequest } from "./speaker_phone";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service speaker_phone.SpeakerPhoneService
 */
export interface ISpeakerPhoneServiceClient {
    /**
     * @generated from protobuf rpc: GetSpeakerPhone(speaker_phone.GetSpeakerPhoneRequest) returns (speaker_phone.GetSpeakerPhoneResponse);
     */
    getSpeakerPhone(input: GetSpeakerPhoneRequest, options?: RpcOptions): UnaryCall<GetSpeakerPhoneRequest, GetSpeakerPhoneResponse>;
    /**
     * @generated from protobuf rpc: CreateSpeakerPhone(speaker_phone.CreateSpeakerPhoneRequest) returns (speaker_phone.CreateSpeakerPhoneResponse);
     */
    createSpeakerPhone(input: CreateSpeakerPhoneRequest, options?: RpcOptions): UnaryCall<CreateSpeakerPhoneRequest, CreateSpeakerPhoneResponse>;
    /**
     * SpeakerPhoneの名前として使用可能な文字列のリストを取得する
     * 例: `#general`, `#random`
     *
     * @generated from protobuf rpc: GetAvailableChannels(speaker_phone.GetAvailableChannelsRequest) returns (speaker_phone.GetAvailableChannelsResponse);
     */
    getAvailableChannels(input: GetAvailableChannelsRequest, options?: RpcOptions): UnaryCall<GetAvailableChannelsRequest, GetAvailableChannelsResponse>;
    /**
     * SpeakerPhoneの名前を検索する
     *
     * @generated from protobuf rpc: SearchChannels(speaker_phone.SearchChannelsRequest) returns (speaker_phone.SearchChannelsResponse);
     */
    searchChannels(input: SearchChannelsRequest, options?: RpcOptions): UnaryCall<SearchChannelsRequest, SearchChannelsResponse>;
}
/**
 * @generated from protobuf service speaker_phone.SpeakerPhoneService
 */
export class SpeakerPhoneServiceClient implements ISpeakerPhoneServiceClient, ServiceInfo {
    typeName = SpeakerPhoneService.typeName;
    methods = SpeakerPhoneService.methods;
    options = SpeakerPhoneService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSpeakerPhone(speaker_phone.GetSpeakerPhoneRequest) returns (speaker_phone.GetSpeakerPhoneResponse);
     */
    getSpeakerPhone(input: GetSpeakerPhoneRequest, options?: RpcOptions): UnaryCall<GetSpeakerPhoneRequest, GetSpeakerPhoneResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSpeakerPhoneRequest, GetSpeakerPhoneResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateSpeakerPhone(speaker_phone.CreateSpeakerPhoneRequest) returns (speaker_phone.CreateSpeakerPhoneResponse);
     */
    createSpeakerPhone(input: CreateSpeakerPhoneRequest, options?: RpcOptions): UnaryCall<CreateSpeakerPhoneRequest, CreateSpeakerPhoneResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSpeakerPhoneRequest, CreateSpeakerPhoneResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SpeakerPhoneの名前として使用可能な文字列のリストを取得する
     * 例: `#general`, `#random`
     *
     * @generated from protobuf rpc: GetAvailableChannels(speaker_phone.GetAvailableChannelsRequest) returns (speaker_phone.GetAvailableChannelsResponse);
     */
    getAvailableChannels(input: GetAvailableChannelsRequest, options?: RpcOptions): UnaryCall<GetAvailableChannelsRequest, GetAvailableChannelsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAvailableChannelsRequest, GetAvailableChannelsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SpeakerPhoneの名前を検索する
     *
     * @generated from protobuf rpc: SearchChannels(speaker_phone.SearchChannelsRequest) returns (speaker_phone.SearchChannelsResponse);
     */
    searchChannels(input: SearchChannelsRequest, options?: RpcOptions): UnaryCall<SearchChannelsRequest, SearchChannelsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchChannelsRequest, SearchChannelsResponse>("unary", this._transport, method, opt, input);
    }
}
