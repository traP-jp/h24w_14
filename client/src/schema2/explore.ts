// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "explore.proto" (package "explore", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Reaction } from "./reaction";
import { SpeakerPhone } from "./speaker_phone";
import { Message } from "./message";
import { Size } from "./world";
import { Coordinate } from "./world";
/**
 * 探索者; 探索中のユーザー
 *
 * @generated from protobuf message explore.Explorer
 */
export interface Explorer {
    /**
     * UUID (ULIDかも) ユーザーIDとは別物
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * ユーザーID
     * ユーザーの情報はuser.protoに記述
     *
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * そのユーザーの現在地 座標
     *
     * @generated from protobuf field: world.Coordinate position = 3;
     */
    position?: Coordinate;
}
/**
 * 探索者が一度に表示できる領域
 *
 * @generated from protobuf message explore.ExplorationField
 */
export interface ExplorationField {
    /**
     * 中心座標
     *
     * @generated from protobuf field: world.Coordinate position = 1;
     */
    position?: Coordinate;
    /**
     * 表示範囲
     *
     * @generated from protobuf field: world.Size size = 2;
     */
    size?: Size;
}
/**
 * @generated from protobuf message explore.ExplorerAction
 */
export interface ExplorerAction {
    /**
     * @generated from protobuf oneof: action
     */
    action: {
        oneofKind: "arrive";
        /**
         * @generated from protobuf field: explore.ExplorerAction.Arrive arrive = 1;
         */
        arrive: ExplorerAction_Arrive;
    } | {
        oneofKind: "move";
        /**
         * @generated from protobuf field: explore.ExplorerAction.Move move = 2;
         */
        move: ExplorerAction_Move;
    } | {
        oneofKind: "leave";
        /**
         * @generated from protobuf field: explore.ExplorerAction.Leave leave = 3;
         */
        leave: ExplorerAction_Leave;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 探索者がオンラインになった時
 *
 * @generated from protobuf message explore.ExplorerAction.Arrive
 */
export interface ExplorerAction_Arrive {
    /**
     * 探索者
     *
     * @generated from protobuf field: explore.Explorer explorer = 1;
     */
    explorer?: Explorer;
}
/**
 * 探索者が移動した時
 *
 * @generated from protobuf message explore.ExplorerAction.Move
 */
export interface ExplorerAction_Move {
    /**
     * 探索者
     *
     * @generated from protobuf field: explore.Explorer explorer = 1;
     */
    explorer?: Explorer;
}
/**
 * 探索者がオフラインになった時
 *
 * @generated from protobuf message explore.ExplorerAction.Leave
 */
export interface ExplorerAction_Leave {
    /**
     * 探索者のID
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * フィールド探索中のイベント
 *
 * @generated from protobuf message explore.ExplorationFieldEvents
 */
export interface ExplorationFieldEvents {
    /**
     * 新しいメッセージのリスト
     * 直近に投稿されたメッセージ、以前に投稿されたがExplorationFieldに入ったメッセージを含む
     *
     * @generated from protobuf field: repeated msg.Message messages = 1;
     */
    messages: Message[];
    /**
     * 新しいスピーカーフォンのリスト
     * 直近に設置されたスピーカーフォン、以前に設置されたがExplorationFieldに入ったスピーカーフォンを含む
     *
     * @generated from protobuf field: repeated speaker_phone.SpeakerPhone speaker_phones = 2;
     */
    speakerPhones: SpeakerPhone[];
    /**
     * 新しいリアクションのリスト
     * 直近のリアクションのみを含む
     * 以前のリアクションは含まない; すぐに揮発して見えなくなるため
     *
     * @generated from protobuf field: repeated reaction.Reaction reactions = 3;
     */
    reactions: Reaction[];
    /**
     * 探索者の更新全般
     * 新しくオンラインになったユーザー、既にオンラインで移動したユーザー、オフラインになったユーザーを含む
     *
     * @generated from protobuf field: repeated explore.ExplorerAction explorer_actions = 4;
     */
    explorerActions: ExplorerAction[]; // 整合性チェックのために追加するかも
    // world.Coordinate position = 5;
}
// @generated message type with reflection information, may provide speed optimized methods
class Explorer$Type extends MessageType<Explorer> {
    constructor() {
        super("explore.Explorer", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "position", kind: "message", T: () => Coordinate }
        ]);
    }
    create(value?: PartialMessage<Explorer>): Explorer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<Explorer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Explorer): Explorer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* world.Coordinate position */ 3:
                    message.position = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Explorer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* world.Coordinate position = 3; */
        if (message.position)
            Coordinate.internalBinaryWrite(message.position, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.Explorer
 */
export const Explorer = new Explorer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExplorationField$Type extends MessageType<ExplorationField> {
    constructor() {
        super("explore.ExplorationField", [
            { no: 1, name: "position", kind: "message", T: () => Coordinate },
            { no: 2, name: "size", kind: "message", T: () => Size }
        ]);
    }
    create(value?: PartialMessage<ExplorationField>): ExplorationField {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExplorationField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExplorationField): ExplorationField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* world.Coordinate position */ 1:
                    message.position = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* world.Size size */ 2:
                    message.size = Size.internalBinaryRead(reader, reader.uint32(), options, message.size);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExplorationField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* world.Coordinate position = 1; */
        if (message.position)
            Coordinate.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* world.Size size = 2; */
        if (message.size)
            Size.internalBinaryWrite(message.size, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.ExplorationField
 */
export const ExplorationField = new ExplorationField$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExplorerAction$Type extends MessageType<ExplorerAction> {
    constructor() {
        super("explore.ExplorerAction", [
            { no: 1, name: "arrive", kind: "message", oneof: "action", T: () => ExplorerAction_Arrive },
            { no: 2, name: "move", kind: "message", oneof: "action", T: () => ExplorerAction_Move },
            { no: 3, name: "leave", kind: "message", oneof: "action", T: () => ExplorerAction_Leave }
        ]);
    }
    create(value?: PartialMessage<ExplorerAction>): ExplorerAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.action = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExplorerAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExplorerAction): ExplorerAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* explore.ExplorerAction.Arrive arrive */ 1:
                    message.action = {
                        oneofKind: "arrive",
                        arrive: ExplorerAction_Arrive.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).arrive)
                    };
                    break;
                case /* explore.ExplorerAction.Move move */ 2:
                    message.action = {
                        oneofKind: "move",
                        move: ExplorerAction_Move.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).move)
                    };
                    break;
                case /* explore.ExplorerAction.Leave leave */ 3:
                    message.action = {
                        oneofKind: "leave",
                        leave: ExplorerAction_Leave.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).leave)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExplorerAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* explore.ExplorerAction.Arrive arrive = 1; */
        if (message.action.oneofKind === "arrive")
            ExplorerAction_Arrive.internalBinaryWrite(message.action.arrive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* explore.ExplorerAction.Move move = 2; */
        if (message.action.oneofKind === "move")
            ExplorerAction_Move.internalBinaryWrite(message.action.move, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* explore.ExplorerAction.Leave leave = 3; */
        if (message.action.oneofKind === "leave")
            ExplorerAction_Leave.internalBinaryWrite(message.action.leave, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.ExplorerAction
 */
export const ExplorerAction = new ExplorerAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExplorerAction_Arrive$Type extends MessageType<ExplorerAction_Arrive> {
    constructor() {
        super("explore.ExplorerAction.Arrive", [
            { no: 1, name: "explorer", kind: "message", T: () => Explorer }
        ]);
    }
    create(value?: PartialMessage<ExplorerAction_Arrive>): ExplorerAction_Arrive {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExplorerAction_Arrive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExplorerAction_Arrive): ExplorerAction_Arrive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* explore.Explorer explorer */ 1:
                    message.explorer = Explorer.internalBinaryRead(reader, reader.uint32(), options, message.explorer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExplorerAction_Arrive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* explore.Explorer explorer = 1; */
        if (message.explorer)
            Explorer.internalBinaryWrite(message.explorer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.ExplorerAction.Arrive
 */
export const ExplorerAction_Arrive = new ExplorerAction_Arrive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExplorerAction_Move$Type extends MessageType<ExplorerAction_Move> {
    constructor() {
        super("explore.ExplorerAction.Move", [
            { no: 1, name: "explorer", kind: "message", T: () => Explorer }
        ]);
    }
    create(value?: PartialMessage<ExplorerAction_Move>): ExplorerAction_Move {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExplorerAction_Move>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExplorerAction_Move): ExplorerAction_Move {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* explore.Explorer explorer */ 1:
                    message.explorer = Explorer.internalBinaryRead(reader, reader.uint32(), options, message.explorer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExplorerAction_Move, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* explore.Explorer explorer = 1; */
        if (message.explorer)
            Explorer.internalBinaryWrite(message.explorer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.ExplorerAction.Move
 */
export const ExplorerAction_Move = new ExplorerAction_Move$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExplorerAction_Leave$Type extends MessageType<ExplorerAction_Leave> {
    constructor() {
        super("explore.ExplorerAction.Leave", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExplorerAction_Leave>): ExplorerAction_Leave {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<ExplorerAction_Leave>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExplorerAction_Leave): ExplorerAction_Leave {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExplorerAction_Leave, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.ExplorerAction.Leave
 */
export const ExplorerAction_Leave = new ExplorerAction_Leave$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExplorationFieldEvents$Type extends MessageType<ExplorationFieldEvents> {
    constructor() {
        super("explore.ExplorationFieldEvents", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message },
            { no: 2, name: "speaker_phones", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SpeakerPhone },
            { no: 3, name: "reactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Reaction },
            { no: 4, name: "explorer_actions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExplorerAction }
        ]);
    }
    create(value?: PartialMessage<ExplorationFieldEvents>): ExplorationFieldEvents {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        message.speakerPhones = [];
        message.reactions = [];
        message.explorerActions = [];
        if (value !== undefined)
            reflectionMergePartial<ExplorationFieldEvents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExplorationFieldEvents): ExplorationFieldEvents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated msg.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated speaker_phone.SpeakerPhone speaker_phones */ 2:
                    message.speakerPhones.push(SpeakerPhone.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated reaction.Reaction reactions */ 3:
                    message.reactions.push(Reaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated explore.ExplorerAction explorer_actions */ 4:
                    message.explorerActions.push(ExplorerAction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExplorationFieldEvents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated msg.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated speaker_phone.SpeakerPhone speaker_phones = 2; */
        for (let i = 0; i < message.speakerPhones.length; i++)
            SpeakerPhone.internalBinaryWrite(message.speakerPhones[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated reaction.Reaction reactions = 3; */
        for (let i = 0; i < message.reactions.length; i++)
            Reaction.internalBinaryWrite(message.reactions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated explore.ExplorerAction explorer_actions = 4; */
        for (let i = 0; i < message.explorerActions.length; i++)
            ExplorerAction.internalBinaryWrite(message.explorerActions[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message explore.ExplorationFieldEvents
 */
export const ExplorationFieldEvents = new ExplorationFieldEvents$Type();
