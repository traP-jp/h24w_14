// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "world.proto" (package "world", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WorldService } from "./world";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetWorldResponse } from "./world";
import type { GetWorldRequest } from "./world";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service world.WorldService
 */
export interface IWorldServiceClient {
    /**
     * @generated from protobuf rpc: GetWorld(world.GetWorldRequest) returns (world.GetWorldResponse);
     */
    getWorld(input: GetWorldRequest, options?: RpcOptions): UnaryCall<GetWorldRequest, GetWorldResponse>;
}
/**
 * @generated from protobuf service world.WorldService
 */
export class WorldServiceClient implements IWorldServiceClient, ServiceInfo {
    typeName = WorldService.typeName;
    methods = WorldService.methods;
    options = WorldService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetWorld(world.GetWorldRequest) returns (world.GetWorldResponse);
     */
    getWorld(input: GetWorldRequest, options?: RpcOptions): UnaryCall<GetWorldRequest, GetWorldResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetWorldRequest, GetWorldResponse>("unary", this._transport, method, opt, input);
    }
}
