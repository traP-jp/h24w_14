// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "speaker_phone.proto" (package "speaker_phone", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Coordinate } from "./world";
/**
 * @generated from protobuf message speaker_phone.SpeakerPhone
 */
export interface SpeakerPhone {
    /**
     * UUID
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * 座標
     *
     * @generated from protobuf field: world.Coordinate position = 2;
     */
    position?: Coordinate;
    /**
     * メッセージを受信できる範囲(半径)
     *
     * @generated from protobuf field: uint32 receive_range = 3;
     */
    receiveRange: number;
    /**
     * SpeakerPhoneの名前
     * 必ず`#`から始まる
     *
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * 送信日時
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * 更新日時
     *
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message speaker_phone.GetSpeakerPhoneRequest
 */
export interface GetSpeakerPhoneRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message speaker_phone.GetSpeakerPhoneResponse
 */
export interface GetSpeakerPhoneResponse {
    /**
     * @generated from protobuf field: speaker_phone.SpeakerPhone speaker_phone = 1;
     */
    speakerPhone?: SpeakerPhone;
}
/**
 * @generated from protobuf message speaker_phone.CreateSpeakerPhoneRequest
 */
export interface CreateSpeakerPhoneRequest {
    /**
     * スピーカーフォンの座標
     *
     * @generated from protobuf field: world.Coordinate position = 1;
     */
    position?: Coordinate;
    /**
     * SpeakerPhoneの名前
     * 必ず`#`から始まる
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message speaker_phone.CreateSpeakerPhoneResponse
 */
export interface CreateSpeakerPhoneResponse {
    /**
     * @generated from protobuf field: speaker_phone.SpeakerPhone speaker_phone = 1;
     */
    speakerPhone?: SpeakerPhone;
}
/**
 * @generated from protobuf message speaker_phone.GetAvailableChannelsRequest
 */
export interface GetAvailableChannelsRequest {
}
/**
 * @generated from protobuf message speaker_phone.GetAvailableChannelsResponse
 */
export interface GetAvailableChannelsResponse {
    /**
     * @generated from protobuf field: repeated string channels = 1;
     */
    channels: string[];
}
/**
 * @generated from protobuf message speaker_phone.SearchChannelsRequest
 */
export interface SearchChannelsRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message speaker_phone.SearchChannelsResponse
 */
export interface SearchChannelsResponse {
    /**
     * @generated from protobuf field: repeated string hits = 1;
     */
    hits: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SpeakerPhone$Type extends MessageType<SpeakerPhone> {
    constructor() {
        super("speaker_phone.SpeakerPhone", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "position", kind: "message", T: () => Coordinate },
            { no: 3, name: "receive_range", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<SpeakerPhone>): SpeakerPhone {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.receiveRange = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SpeakerPhone>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpeakerPhone): SpeakerPhone {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* world.Coordinate position */ 2:
                    message.position = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* uint32 receive_range */ 3:
                    message.receiveRange = reader.uint32();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 7:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpeakerPhone, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* world.Coordinate position = 2; */
        if (message.position)
            Coordinate.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 receive_range = 3; */
        if (message.receiveRange !== 0)
            writer.tag(3, WireType.Varint).uint32(message.receiveRange);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 7; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.SpeakerPhone
 */
export const SpeakerPhone = new SpeakerPhone$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSpeakerPhoneRequest$Type extends MessageType<GetSpeakerPhoneRequest> {
    constructor() {
        super("speaker_phone.GetSpeakerPhoneRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSpeakerPhoneRequest>): GetSpeakerPhoneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetSpeakerPhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSpeakerPhoneRequest): GetSpeakerPhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSpeakerPhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.GetSpeakerPhoneRequest
 */
export const GetSpeakerPhoneRequest = new GetSpeakerPhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSpeakerPhoneResponse$Type extends MessageType<GetSpeakerPhoneResponse> {
    constructor() {
        super("speaker_phone.GetSpeakerPhoneResponse", [
            { no: 1, name: "speaker_phone", kind: "message", T: () => SpeakerPhone }
        ]);
    }
    create(value?: PartialMessage<GetSpeakerPhoneResponse>): GetSpeakerPhoneResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSpeakerPhoneResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSpeakerPhoneResponse): GetSpeakerPhoneResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* speaker_phone.SpeakerPhone speaker_phone */ 1:
                    message.speakerPhone = SpeakerPhone.internalBinaryRead(reader, reader.uint32(), options, message.speakerPhone);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSpeakerPhoneResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* speaker_phone.SpeakerPhone speaker_phone = 1; */
        if (message.speakerPhone)
            SpeakerPhone.internalBinaryWrite(message.speakerPhone, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.GetSpeakerPhoneResponse
 */
export const GetSpeakerPhoneResponse = new GetSpeakerPhoneResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSpeakerPhoneRequest$Type extends MessageType<CreateSpeakerPhoneRequest> {
    constructor() {
        super("speaker_phone.CreateSpeakerPhoneRequest", [
            { no: 1, name: "position", kind: "message", T: () => Coordinate },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSpeakerPhoneRequest>): CreateSpeakerPhoneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSpeakerPhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSpeakerPhoneRequest): CreateSpeakerPhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* world.Coordinate position */ 1:
                    message.position = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSpeakerPhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* world.Coordinate position = 1; */
        if (message.position)
            Coordinate.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.CreateSpeakerPhoneRequest
 */
export const CreateSpeakerPhoneRequest = new CreateSpeakerPhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSpeakerPhoneResponse$Type extends MessageType<CreateSpeakerPhoneResponse> {
    constructor() {
        super("speaker_phone.CreateSpeakerPhoneResponse", [
            { no: 1, name: "speaker_phone", kind: "message", T: () => SpeakerPhone }
        ]);
    }
    create(value?: PartialMessage<CreateSpeakerPhoneResponse>): CreateSpeakerPhoneResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateSpeakerPhoneResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSpeakerPhoneResponse): CreateSpeakerPhoneResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* speaker_phone.SpeakerPhone speaker_phone */ 1:
                    message.speakerPhone = SpeakerPhone.internalBinaryRead(reader, reader.uint32(), options, message.speakerPhone);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSpeakerPhoneResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* speaker_phone.SpeakerPhone speaker_phone = 1; */
        if (message.speakerPhone)
            SpeakerPhone.internalBinaryWrite(message.speakerPhone, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.CreateSpeakerPhoneResponse
 */
export const CreateSpeakerPhoneResponse = new CreateSpeakerPhoneResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAvailableChannelsRequest$Type extends MessageType<GetAvailableChannelsRequest> {
    constructor() {
        super("speaker_phone.GetAvailableChannelsRequest", []);
    }
    create(value?: PartialMessage<GetAvailableChannelsRequest>): GetAvailableChannelsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAvailableChannelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAvailableChannelsRequest): GetAvailableChannelsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAvailableChannelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.GetAvailableChannelsRequest
 */
export const GetAvailableChannelsRequest = new GetAvailableChannelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAvailableChannelsResponse$Type extends MessageType<GetAvailableChannelsResponse> {
    constructor() {
        super("speaker_phone.GetAvailableChannelsResponse", [
            { no: 1, name: "channels", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAvailableChannelsResponse>): GetAvailableChannelsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial<GetAvailableChannelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAvailableChannelsResponse): GetAvailableChannelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string channels */ 1:
                    message.channels.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAvailableChannelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string channels = 1; */
        for (let i = 0; i < message.channels.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.channels[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.GetAvailableChannelsResponse
 */
export const GetAvailableChannelsResponse = new GetAvailableChannelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchChannelsRequest$Type extends MessageType<SearchChannelsRequest> {
    constructor() {
        super("speaker_phone.SearchChannelsRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchChannelsRequest>): SearchChannelsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SearchChannelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchChannelsRequest): SearchChannelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchChannelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.SearchChannelsRequest
 */
export const SearchChannelsRequest = new SearchChannelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchChannelsResponse$Type extends MessageType<SearchChannelsResponse> {
    constructor() {
        super("speaker_phone.SearchChannelsResponse", [
            { no: 1, name: "hits", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchChannelsResponse>): SearchChannelsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hits = [];
        if (value !== undefined)
            reflectionMergePartial<SearchChannelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchChannelsResponse): SearchChannelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string hits */ 1:
                    message.hits.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchChannelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string hits = 1; */
        for (let i = 0; i < message.hits.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.hits[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message speaker_phone.SearchChannelsResponse
 */
export const SearchChannelsResponse = new SearchChannelsResponse$Type();
/**
 * @generated ServiceType for protobuf service speaker_phone.SpeakerPhoneService
 */
export const SpeakerPhoneService = new ServiceType("speaker_phone.SpeakerPhoneService", [
    { name: "GetSpeakerPhone", options: {}, I: GetSpeakerPhoneRequest, O: GetSpeakerPhoneResponse },
    { name: "CreateSpeakerPhone", options: {}, I: CreateSpeakerPhoneRequest, O: CreateSpeakerPhoneResponse },
    { name: "GetAvailableChannels", options: {}, I: GetAvailableChannelsRequest, O: GetAvailableChannelsResponse },
    { name: "SearchChannels", options: {}, I: SearchChannelsRequest, O: SearchChannelsResponse }
]);
